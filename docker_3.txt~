镜像：
Docker镜像是一个只读的模板,例如一个镜像可以是一个完整的操作系统环境。里面安装了Apache或用户所需要的其他应用程序等。Docker容器是从镜像中创建的运行实例，可以被启动，开始，停止删除等，每个容器相互隔离，也可以从将当前的容器commit从而创建一个新的镜像。而docker仓库是用来存放镜像的。
docker中镜像的创建：1.可以提交当前运行的容器，从而生成一个新的镜像，在此不再详述。
	2，也可以使用dockerfile来创建镜像。例如：
	# This is a comment
	FROM ubuntu:14.04
	MAINTAINER Docker Newbee <newbee@docker.com>
	RUN apt-get -qq update
	RUN apt-get -qqy install ruby ruby-dev
	RUN gem install sinatra
	其中FROM表示该镜像以什么为基础，然后是维护者的信息，每个RUN表示在镜像中运行一条指令。需要指出的是每次指令运行后都会生成一个新的镜像，在所有的指令运行结束后会将中间的镜像删除掉。
	在编辑好Dockerfile后运行sudo docker build -t="ouruser/sinatra:v2" . 就可以完成一个image的创建了。其中-t表示新的image的tag，"."表示dockerfile位于当前目录下。
	从本地文件倒入image的方法：先下载好一个ubuntu-14.04-x86_64-minimal.tar.gz镜像，然后使用命令sudo cat ubuntu-14.04-x86_64-minimal.tar.gz  |docker import - ubuntu:14.04 进行导入。
	从docker中导出镜像到本地文件：sudo docker save -o ubuntu_14.04.tar ubuntu:14.04
	将本地文件导入到docker中生成镜像：sudo docker load --input ubuntu_14.04.tar
	
	每个镜像都由很多层次构成，Docker 使用 Union FS 将这些不同的层结合到一个镜像中去。通常 Union FS 有两个用途, 一方面可以实现不借助 LVM、RAID 将多个 disk 挂到同一个目录下,另一个更常用的就是将一个只读的分支和一个可写的分支联合在一起，Live CD 正是基于此方法可以允许在镜像不变的基础上允许用户在其上进行一些写操作。Docker 在 AUFS 上构建的容器也是利用了类似的原理。

容器：
	docker run images来运行容器一个容器，在执行docker run之后docker执行的操作有：
		1, 检查本地是否存在指定的镜像，不存在就从公有仓库下载
		2, 利用镜像创建并启动一个容器
		3, 分配一个文件系统，并在只读的镜像层外面挂载一层可读写层
		4, 从宿主主机配置的网桥接口中桥接一个虚拟接口到容器中去
		5, 从地址池配置一个 ip 地址给容器
		6, 执行用户指定的应用程序
		7, 执行完毕后容器被终止
		在后台运行容器： 添加-d参数，表示该容器在后台运行。
	sudo docker ps显示当前正在运行的容器.
	sudo docker ps -a显示当前存在的且已经停止了的容器。
	sudo docker -i start CONTAINER_ID可以重启一个容器，并与当前的终端联系起来。
	sudo docker attach CONTAINER_ID 将当前终端与一个后台运行的container连下起来
	sudo docker export CONTAINER_ID > ubuntu.tar导出当前容器的快照到本地文件。
	cat ubuntu.tar | sudo docker import - test/ubuntu:v1.0 将一个文件快照导入到docker中形成一个新的image
	sudo docker rm 删除一个非运行状态的容器























