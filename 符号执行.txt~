符号执行技术研究
软件安全性愈来愈来受到人们的重视,基于静态分析的技术是一种有效的方法.静态分析是一种在不执行程序的情况下对代码进行评估的方式,它通过对当前状态及趋势的分析来预测未来软件所有的执行情况.源码的静态分析包括模型检测,数据流分析,抽象解释,渭词转化以及符号执行等.其中符号执行是一种行之有效的方式.
符号执行是在程序不执行的情况下用符号表示程序变量的值,然后通过模拟程序执行来进行相关分析的技术.它可以分析代码的所有语义信息.符号执行分为过程性分析和过程间分析两种方式,过程内分析是对单个软件代码(单个函数)进行上下文分析,其中只考虑当前函数入口处的调用信息和环境信息,而过程间分析是在过程内分析的基础上,引入了函数之间的相互调用.过程内和过程间分析是相互独立又相互依赖的关系.
过程内的分析,首先要对程序单个过程代码对象构建控制流图(CFG),其中每个节点表示一个基本快,基本块是没有任何跳转的顺序语句代码块,图中的边是代码的跳转,边的起点和终点都是基本块.在CFG上从入口节点进行模拟,当遇到分支节点的时候使用约束求解器判定那条分支可以执行。并根据预先设定的路径遍历策略进行分析（DFS或BFS），最后输出结果。如果是进行安全性分析，需要添加安全约束，例如分析缓冲区溢出时，对缓冲区添加缓冲区溢出的安全约束，在进行内存对象操作时先进行安全边界检测。
过程间分析时先对整个代码构建函数调用图（CG），节点表示函数，边表示函数调用。最后对CG中的每个节点进行过程内分析，最终给出分析结果。
在符号执行的发展过程中出现了一种叫做动态符号执行的方法，不过这种方法的具体的执行方式和过程还不太了解。
符号执行的关键技术
路径空间爆炸问题：在符号执行的过程中每个分支语句都可能会使当前路径再产生一个分支，这个是指数级别的，为了解决这个问题通常采用对每个路径数目进行限定，对程序运行内存进行限定或者对程序运行时间进行限定的方法。另外程序的设计者希望在有限的时间和空间里达到最大的代码覆盖率。但是这并不能从根本上解决。
在程序全局分析过程中,当对一个规模较大、包含很多的过程间调用的程序进行上下文敏感的分析时,每当一个过程调用了另一个过程都需要进入子进程进行分析，虽然会比较精确，但是这种方式可能会造成巨大的空间开销，从而使得分析过程异常或在用户指定的时间内无法完成。一种比较好的解决方案是使用一种叫做“函数摘要”的方法。相当于为每个函数做一个映射，这样在不同位置调用相同的函数的时候就不需要做重复过程内分析，从而大幅提升效率。










