Traditional Fuzzing technology is used to generate testing input by random or simi-random method. With the development of computer science, some test input generating method based on protocal and file format has presented gradually, meanwhile, some heuristic rules are also used to this field. However, despite advances in fuzzing technology, it can't change its inherent limitations.
	1, It is hard to find errors caused by a narrow range of test inputs;
	2, It can hardly find exceptions caused by the combined effects of several inputing files;
So, symbolic exection methods are widespread used in software testing to find potential vulnerabilities.

In order to address the shotcoming of tranditional fuzzing, some researches proposed to combine fuzzing and symbolic exection technology together. In detail, the results of symbolic exection is used to guide the test input generation of fuzzing. 
	1, regarding the input as symbolic parameter, and execting the target program in symbolic exection platform;
	2, monitoring the exection state by auxiliary code, and analysing the dependencies between test inputs and conditions;
	3, collecting and generating the constraints for all paths;
	4, generating new path constraints by reversing some of the constraints of current path;
	5, constraint-solving, creating new test input.
	
Key Technology
1, Modifing Source Code
	In order to collect path constraints, we should modify the original binary code first. We need to translate some machine codes into some intermediate instructions, which are easy to ananlysed due to the apparent register and memory operation.
2, Data Flow Analysis Based on Taint
	In basic taint analysis, we regard the incredible data which could be used by haker as the taint data, and then monitor the transition and usage of them. When creating constraints for a path, auxiliary code is going to analyse and determain the dependencies between test inputs and conditions. If this constraint is independent of input data, we will ingore current constraint.
3, Path Traverse Algorithm
	In order to maxmize code coverage and optimize constaint solving, we proposed a new path traverse algorithm based on reverse. We will reverse the constraint one by one from top to bottom util complete traversing all the tree. This algorithm can maxmize the usage the cache as well as increase the code coverage.
