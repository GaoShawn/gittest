Hercules:对原有的linux应用中重现crash
Hercules提出了一种能够找到产生特定crash的方法。其核心思想是通过符号化执行去探索可能到达或引发程序crash的路径集合。
step1：通过执行一些随机产生的良性输入文件建立起程序模块间的关系和调用结构，当然由于这些输入文件是随机产生的，在这一步中产生的文件调用关系并不是完整的。同时，在这一步中也记录能到达crash位置，或能到达crash所在模块入口的输入文件；
step2：通过concolic执行由step1中收集到的输入文件，并收集该过程中产生符号化限制，这些符号化限制都是能到达crash所在模块的。通过这些得到需要符号化的输入部分（部分输入），这种方式能解决两个问题：1，这样能产生更少的符号，缓解constraint solving的复杂度；2，这样能跳过一些非关键路径，缓解路径爆炸问题；
step3：进一步执行concolic，使用目标寻找算法。假设进入crash模块的条件是A，而在执行过程中某条路径收集到的路径限制是B，这样第一步先判断是否存在同时满足A和B的输入值，第二步提取出不满足A的B中条件的最小子集，并将其置入unsat_core中。这样在concolic执行的过程中，不满足unsat_core的路径将不再执行。另外，对于有些能得到crash状态（如，寄存器状态）的情况，也可以比较当前的路径限制条件与crash状态的冲突，并将冲突的限制加入到unsat_core中。
