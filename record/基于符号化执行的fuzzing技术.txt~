Fuzzing技术一般采用随机或者半随机的方法构造Fuzzing测试集，随着发展逐渐出现了一些给予协议或文件格式动态生成测试集的方法，以及一些基于一定的启发式规则动态生成测试集的方法。尽管Fuzzing技术不断发展，其仍然具有黑盒测试的局限性：
	1，难以发现输入值限定在小范围才能引发的错误；
	2, 难以发现需要几个输入文件同时起作用才能引发的异常；
	3, 难以通过文件格式检查或需要人工对复杂文件格式进行分析。
为此符号化执行在软件测试和漏洞检测中得到了广泛的应用。

针对传统Fuzzing技术的不足，有人提出通过将符号化执行和Fuzzing测试技术结合使用.具体原理是根据符号化执行结果来指导模糊测试输入数据的生成。在执行过程中，
1, 程序的输入被当成符号变量，通过一种二进制代码监控平台来加载和执行目标程序；
2, 辅助代码检测程序执行状态，并结合数据流分析各约束条件和输入变量之间的依赖关系；
3, 完成与路径对应的路径约束条件的收集和生成；
4, 依据路径遍历算法对当前路径中的部分分支约束条件进行取反，生成新的路径约束；
5, 约束求解，生成新的输入测试数据。

关键技术
1, 辅助代码插桩
为了收集程序的执行路径的路径约束，需要对原始的二进制进行操作。首先将一些机器指令进行扩展翻译成多条中间语言操作，使得这些中间语言显示的对寄存器，内存进行显示的操作，便于代码分析。例如，
	mov eax , t1
	push 4
	push tl
	push 0
	call Ox401816
将一条指令转化为一个函数操作。并在这个函数中进行插桩，收集约束信息。
2, 基于污点的数据流分析
污点分析的基本思想是将外部输入的，有可能被黑客利用的的不可信数据标记为污点，而后监控数据的传播和使用。传统的污点只关注数据的流向和使用，在此出还要为污点添加一个来源属性。在生成路径约束条件时，辅助函数首先对各个参数进行检查，分析并确定当前需要生成的约束条件和输入之间的依赖关系。如果该约束是独立于输入变量的，则当前约束条件不进行生成。
3, 路径遍历算法
为了最大化输入测试数据的生成和便于路径约束条件的优化，在此处提出了一种基于代的路径遍历算法。在该算法中，通过从上到下依次去反当前路径约束条件集，此过程循环进行，完成对执行树的遍历。通过这种方式能最大化的利用缓存，同时在一点的执行时间内，提升代码的覆盖率。















