Software testing is a labor intensice process, and typically accouts for about half the total cost of software development and maintenance. Automating testing would not only reduces the cost of producing software, but also increases the reliability of modern software. The main research challenge is how to efficiently generate test input that will obtain high code coverage. 
In the last two decades, model checking has been the hugely popular method for software checking. Model checking is a automating testing technology for a finite-state system which is mainly used to demonstrate the system can reach the predetermined target by a formalization method. The first step is describing the given system and its priority as finite state model, and then efficient searching process is used to determine whether the system model satisfy the original design. However, model checking programs is hard to completely analyze the program's state space due to the complexity of the code and the limitation of the memory space. To our happiness, we find that if we augment model checking with symbolic exceution, it can result in the generation of test input that will achieve high code coverage.

